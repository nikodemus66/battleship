/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package battleship.client;

import battleship.model.EngineState;
import battleship.model.ShipType;
import battleship.model.ShootState;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JPanel;
import javax.swing.ListModel;

/**
 *
 * @author brian
 */
public class PlacingShipJFrame extends javax.swing.JFrame {

    private DefaultListModel model;
    private GUIPlayer player;
    
    /**
     * Creates new form PlacingShipJFrame
     */
    public PlacingShipJFrame(GUIPlayer player) {
        this.player = player;
        initComponents();
        
        myMapJPanel.addMouseListener( new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                GUIPlayer player = PlacingShipJFrame.this.player;
                int width = e.getComponent().getWidth();
                int height = e.getComponent().getHeight();
                float x = e.getX();
                float y = e.getY();
                
                
                int selectedIndex = shipsAvailableList.getSelectedIndex();
                ShipType ship = (ShipType)model.getElementAt(selectedIndex);
                
                if( ship == null )
                {
                    // tell user to select ship
                    return;
                }
                
                System.out.println("width: " + width );
                System.out.println("height: " + height );
                System.out.println("x: "+ x+ "  y: " + y );
                
                int cx = (int)(x / width * 10);
                int cy = (int)(y / height * 10);
                System.out.println("calced x: "+ cx+ "  y: " + cy );
                System.out.println("placing ship type: "+ ship );
                
                
                if ( player.placeShip( ship, cx, cy, true ))
                {
                    // remove 
                    model.removeElementAt(selectedIndex);
                    update(player.getMyBoard(), myMapJPanel );
                }
                if(model.isEmpty()){
                    player.playerReady();
                    System.out.println("I am ready");
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {}
            @Override
            public void mouseReleased(MouseEvent e) {}
            @Override
            public void mouseEntered(MouseEvent e) {}
            @Override
            public void mouseExited(MouseEvent e) {}
            }
        );
        
        // create my grid
        for(int i=0;i<100;i++)
        {
            JPanel field = new JPanel();
            field.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));
            myMapJPanel.add(field);
        }
        update(player.getMyBoard(), myMapJPanel );
        // create grid opponend
        for(int i=0;i<100;i++)
        {
            JPanel field = new JPanel();
            field.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));
            opponendMapJPanel.add(field);
        }
        opponendMapJPanel.setVisible(false);
        
       
        model = new DefaultListModel();
        for( ShipType s : Player.getShips( ))
            model.addElement(s);
        shipsAvailableList.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        myMapJPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        shipsAvailableList = new javax.swing.JList();
        opponendMapJPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        myMapJPanel.setName(""); // NOI18N
        myMapJPanel.setLayout(new java.awt.GridLayout(10, 10));

        shipsAvailableList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(shipsAvailableList);

        opponendMapJPanel.setName(""); // NOI18N
        opponendMapJPanel.setLayout(new java.awt.GridLayout(10, 10));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(myMapJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(opponendMapJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(105, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(74, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(opponendMapJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(myMapJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(62, 62, 62))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void update(ShootState[][] board, JPanel map )
    {
        //zeichne das Spielfeld neu
        for( int y = 0; y < board.length; y++ )
        {
          for( int x = 0; x < board[y].length; x++ )
          {
              JPanel field = (JPanel)map.getComponent(x+10*y);
                System.out.println("board " + x + " " + y + " " + board[x][y].name() + " | " + (x+10*y));
              switch( board[x][y] )
                {
                  case WATER:
                    field.setBackground(Color.blue);  
                    break;
                  case SHIP:
                    field.setBackground(Color.gray);
                    break;
                  case MISS:
                    field.setBackground(Color.green);
                    break;
                  case HIT:
                    field.setBackground(Color.black);
                    break;
                  case HIT_SUNKEN:
                    field.setBackground(Color.red);
                    break;
                  default:
                    throw new AssertionError(board[x][y].name());
                }
          }
        }
    }
    
    
   public void stateChanged( EngineState state)
   {
        switch( state )
        {
            case PLAY:  
                opponendMapJPanel.setVisible(true);
                update(player.getOpponendBoard(), opponendMapJPanel );
                break;
            case YOUR_TURN:
                update(player.getMyBoard(), myMapJPanel );
                opponendMapJPanel.addMouseListener( new MouseListener() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        GUIPlayer player = PlacingShipJFrame.this.player;
                        int width = e.getComponent().getWidth();
                        int height = e.getComponent().getHeight();
                        float x = e.getX();
                        float y = e.getY();
                        int cx = (int)(x / width * 10);
                        int cy = (int)(y / height * 10);
                        System.out.println("shoot at x: "+ cx+ "  y: " + cy );


                        ShootState state = player.shoot( cx, cy );
                        switch( state )
                        {
                            case NOT_POSSIBLE:
                                // inform user not possible
                                return;
                            case MISS:
                                update(player.getOpponendBoard(), opponendMapJPanel );
                                break;
                            case HIT:
                                update(player.getOpponendBoard(), opponendMapJPanel );
                                break;
                            case HIT_SUNKEN:
                                update(player.getOpponendBoard(), opponendMapJPanel );
                                break;
                            default:
                                throw new AssertionError(state.name());
                        }
                    }

                    @Override
                    public void mousePressed(MouseEvent e) {}
                    @Override
                    public void mouseReleased(MouseEvent e) {}
                    @Override
                    public void mouseEntered(MouseEvent e) {}
                    @Override
                    public void mouseExited(MouseEvent e) {}
                    }
                );
                break;
            case OPPONENDS_TURN:
                break;
            case YOU_LOST:
                break;
            case YOU_WON:
                break;
            case FINISHED:
                break;
            default:
                throw new AssertionError(state.name());
            
        }
   }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel myMapJPanel;
    private javax.swing.JPanel opponendMapJPanel;
    private javax.swing.JList shipsAvailableList;
    // End of variables declaration//GEN-END:variables
}
